      program invert7

c=======================================================================
c
c     Program invert7.f to invert for slip rate by calling nnls
c
c     This fortran program reads the input and G-matrix and constraints 
c     into arrays, then call nnls to solve for slip rate. 
c
c     This program solve for the uncertainties by simulating noise 
c     based on the data variance. $numsim times of realization gives 
c     the uncertainties of the model parameters.
c
c     Input: 
c       secular surface velocity data points from GPS, InSAR. 
c    
c     G-matrix:
c       predicted surface velocity on the data points (GPS/InSAR) 
c       due to unit slip rate
c
c     Constraints:
c       geological slip rate and plate rate and triple junction
c
c     Output:
c       slip rate on individual fault segments with uncertainties
c     
c     Date: July 2012
c
c=======================================================================


c     Define variables
      implicit none
      
      integer numgps, numsar, numft, nc, nc1, nc2, m, n
      integer i, j, k, p, q, numsimu, narg, mode
      integer lwork, info
      integer rank
      
c  geol + constraints 
c      parameter (numgps=0,numsar=0,numft=56,nc1=30,nc2=10,
c     + m=96, n=56, nc=40) 
c     m = nc1 + nc2 + numft
c
c  CHANGE THIS PART AS NEEDED
c
c  geol + gps + insar + constraints
ccc     m = 2*numgps + numsar + nc1 + nc2 
c     m = 2*numgps + numsar + nc1 + nc2 + numft
      parameter (numgps=1873,numsar=53791,numft=56,nc1=30,nc2=9,
     + m=57632, n=59, nc=39)

c     matrix A is m row n column
c     n is unknowns, m is knowns, 
c     Warning: I assume m>n, it's overdetermined problem
     
      parameter (lwork=n+m*64) 
c
      parameter (numsimu=10)

      double precision sl, wgps, wsar,wc
      double precision xg, yg, corr, xs, ys, ul, vl, zl
      double precision ug(numgps),vg(numgps),sug(numgps),svg(numgps)
      double precision los(numsar),slos(numsar)
      double precision ugg(numgps,numft), vgg(numgps,numft)
      
      double precision cmatr(nc,numft), losgs(numsar,numft) 
      double precision amatr(m,n),bvec(m),xvec(n),wvec(n),rvec(m)
      double precision zvec(m), invec(n), atmp(m,n)
      double precision rnorm
      double precision DNRM2
      double precision fs(numft), sfs(numft)
      double precision A(m,n),B(m,1),work(lwork)
      double precision rcond, S(n)

      double precision u1, u2, nlos, nug, nvg, tmps
      double precision sr(n, numsimu), tmpsum(n), fsr(n), fssr(n) 
      double precision pug(numgps),pvg(numgps),plos(numsar)
      double precision sumsar,sumgps,chisar,chigps,chiboth
      double precision wrmsgps,wrmssar,sumsgps,sumssar
      double precision shiftconst      

      integer JPVT(n)
      character*20 ingps, ingpsfnct, insar, insarfnct, csl, cmat
      character*20 gpsfs, sarfs, cf, cwgps, cwsar, cwc
      
c     parse the command line
      narg = iargc()
      if (narg .ne. 10) then 
        write(*,*) ' '
        write(*,*)
     +  'Usage: invert7 fault.par gps.dat gps.fnct weight.gps insar.dat 
     +  insar.fnct weight.insar slip.rate C-matrix weight.C' 
        write(*,*) ' '
        write(*,*) 
     +  ' fault.par  -  geological fault slip rate with uncertanties '
        write(*,*) ' '
        write(*,*)
     +  ' gps.dat - x_pos(km)  y_po(km)  x_vel(mm/yr)  y_vel(mm/yr)
     + x_std(mm/yr)  y_std(mm/yr)  corr'
        write(*,*) ' '
        write(*,*)
     +  ' gps.fnct - a list of the green function file for GPS data'
        write(*,*) ' '
        write(*,*)
     +  ' green function file for GPS - x_pos(km)  y_pos(km)  x_vel(mm/yr)
     + y_vel(mm/yr)'
        write(*,*) ' '
        write(*,*) 
     +  ' weight.gps - weight for GPS data set'
        write(*,*) ' '
        write(*,*)
     +  ' insar.dat - x_pos(km)  y_pos(km)  x_look  y_look  z_look
     + los_vel(mm/yr)  std(mm/yr) '
        write(*,*) ' '
        write(*,*)
     +  ' insar.fnct - a list of the green function file for InSAR data'
        write(*,*) ' '
        write(*,*)
     +  ' green function file for InSAR  -  x_pos(km)  y_pos(km)
     + los_vel(mm/yr) '
        write(*,*) ' '
        write(*,*) 
     +  ' weight.insar - weight for InSAR data set'
        write(*,*) ' '
        write(*,*) 
     +  ' slip.rate - plate motion rate that all the parallel faults add 
     +up to (e.g. 45 mm/yr) '
        write(*,*) ' '
        write(*,*)
     +  ' C-matrix - the constraint matrix ' 
        write(*,*) ' ' 
        write(*,*)
     +  ' weight.C  - weight for the constraint matrix '
        write(*,*) ' '
        stop
      else
        call getarg(1, cf)
        call getarg(2, ingps)
        call getarg(3, ingpsfnct)
        call getarg(4, cwgps)
        call getarg(5, insar)
        call getarg(6, insarfnct)
        call getarg(7, cwsar)
        call getarg(8, csl)
        call getarg(9, cmat)
        call getarg(10, cwc)
        
        read(csl,*) sl
        read(cwc, *) wc
        read(cwgps, *) wgps
        read(cwsar, *) wsar
      endif
      
      print *, ' '
      print *, 'input: '
      print *, ingps
      print *, ingpsfnct
      print *, insar
      print *, insarfnct
      print *, 'slip rate: ', csl
      print *, 'fault slip rate file:', cf
      print *, 'constraint: ', cmat
      print *, 'constraint weight: ', wc
      print *, 'GPS weight: ', wgps
      print *, 'InSAR weight: ', wsar
      print *, ' '
 
c     Initialize
      do 1 j=1, m
        do 2 i=1, n
          amatr(j,i)=0
          tmpsum(i)=0
2       enddo
        bvec(j)=0
1     enddo
   
      do 3 j=1, numgps
        pug(j)=0
        pvg(j)=0
3     enddo
      do 4 j=1, numsar
        plos(j)=0
4     enddo

      sumsar=0
      sumssar=0
      sumgps=0 
      sumsgps=0 
      shiftconst=100
      rcond=10.0**(-5.0)
     
c     Read in the GPS data points
      open(unit=5, file=ingps, status='old')
      do 10 j = 1, numgps
        read(5,*) xg, yg, ug(j), vg(j), sug(j), svg(j), corr
10    enddo
c 9     format(2(F10.3),5(F8.3))
      close(5)


c     Read in the G-matrix for the GPS data
      open(unit=15, file=ingpsfnct, status='old')
      do 20 i = 1, numft
        read(15,*) gpsfs
        open(unit=25, file=gpsfs, status='old')

        do 30 j = 1, numgps
          read(25,*) xg, yg, ugg(j,i), vgg(j,i)
30      enddo

c19      format(2(F10.3), 2(F10.6))
        close(25)
20    enddo
      close(15)

c     Read in the InSAR data points
      open(unit=35, file=insar, status='old')
      do 40 j = 1, numsar
        read(35,*) xs, ys, ul, vl, zl, los(j), slos(j)
40    enddo
c29    format(2(F10.3),5(F8.3))
      close(35)

c     Read in the G-matrix for the InSAR data
      open(unit=45, file=insarfnct, status='old')
      do 50 i = 1, numft
        read(45,*) sarfs
        open(unit=55, file=sarfs, status='old')

        do 60 j = 1, numsar
          read(55,*) xs, ys, losgs(j,i)
60      enddo

c39      format(2(F10.3), (F10.6))
        close(55)
50    enddo
      close(45)

 
c     Read in the C-matrix
      open(unit=65, file=cmat, status='old')
      do 70 j=1, nc
        read(65,*) (cmatr(j,i), i=1, numft)
70    continue
      close(65)

c     Read in the geological fault slip rate 
      open(unit=75, file=cf, status='old')
      do 150 i=1, numft
        read(75,*) fs(i), sfs(i)
150   enddo        
      close(75)
      
      
c     Form the inversion matrix
c     Form the A-matrix 

c     Use the GPS data
      do 80 j=1, numgps
        do 90 i=1, numft
c     Weighting by sigma
          amatr(j,i)=ugg(j,i)/sug(j)*wgps
          amatr(j+numgps,i)=vgg(j,i)/svg(j)*wgps
90      enddo
        amatr(j,numft+1)=1.0*wgps/sug(j)
        amatr(j,numft+2)=0.0
        amatr(j,numft+3)=0.0
        amatr(j+numgps,numft+1)=0.0
        amatr(j+numgps,numft+2)=1.0*wgps/svg(j)
        amatr(j+numgps,numft+3)=0.0
80    enddo

c     Use the InSAR data
      do 100 j=1, numsar
        do 110 i=1, numft
          amatr(j+2*numgps,i)=losgs(j,i)/slos(j)*wsar
110     enddo
        amatr(j+2*numgps,numft+1)=0.0
        amatr(j+2*numgps,numft+2)=0.0
        amatr(j+2*numgps,numft+3)=1.0*wsar/slos(j)

100   enddo

c     Use the constraint for total slip rate and triple junction
      do 120 j=1, nc
        do 130 i=1, n
c     Weight on the Constraint
          amatr(j+2*numgps+numsar,i)=cmatr(j,i)*wc
130     enddo
        amatr(j+2*numgps+numsar,numft+1)=0
        amatr(j+2*numgps+numsar,numft+2)=0
        amatr(j+2*numgps+numsar,numft+3)=0

c     Weight on the Constraint
        if (j .le. nc1) then
c     Contraint on the total slip rate
          bvec(j+2*numgps+numsar)=sl*wc
        else
c     Contraint on the triple junction
          bvec(j+2*numgps+numsar)=0*wc
        end if
120   enddo      

c     Use the constraint for the geological slip rate
      do 210 j=1, numft
        amatr(j+nc+2*numgps+numsar,j)=1/sfs(j)
        bvec(j+nc+2*numgps+numsar)=fs(j)/sfs(j)
210   enddo
      amatr(j+nc+2*numgps+numsar,numft+1)=0
      amatr(j+nc+2*numgps+numsar,numft+2)=0
      amatr(j+nc+2*numgps+numsar,numft+3)=0


c     Form the b-vector and add random noise to it
c     Start loop here
      do 400 p=1, numsimu 

c     Use the GPS data
        do 300 j=1, numgps
c     generate random numbers with uniform distribution
c     then transform it into normal distribution
c     Box-Muller transform    
          u1 = rand()
          u2 = rand()
           
c          print *, u1, u2
          nug=sug(j)*sqrt(-2.0*log(u1))*cos(2*3.1416*u2)
          nvg=svg(j)*sqrt(-2.0*log(u1))*sin(2*3.1416*u2)
c     Weighting by sigma
          bvec(j)=(ug(j)+nug+shiftconst)/sug(j)*wgps
          bvec(j+numgps)=(vg(j)+nvg+shiftconst)/svg(j)*wgps
300     enddo

c     Use the InSAR data
        do 310 j=1, numsar
          u1=rand()
          u2=rand()
c          print *, u1, u2
          nlos=slos(j)*sqrt(-2.0*log(u1))*cos(2*3.1416*u2)
          bvec(j+2*numgps)=(los(j)+nlos+shiftconst)/slos(j)*wsar
310     enddo

c     print input parameters
        print *, 'paramters: '
        print *, 'numsar=', numsar
        print *, 'numgps=', numgps
        print *, 'nc=', nc
        print *, 'm=', m
        print *, 'numft=', numft
        print *, 'n=', n
        print *, 'sl=', sl

        print *, ' '
        print *, 'start - least square problem' 
      
c     copy the amatr and bvec to A and B
c     as they will be destroyed

        do 250 i=1, m
          do 240 j=1, n
            A(i,j)=amatr(i,j)
c            atmp(i,j)=amatr(i,j)
c            print *, A(i,j)
240       enddo
          B(i,1)=bvec(i)
c          rvec(i)=bvec(i)
c        print *, B(i,1)
250     enddo

c     Call nnls
        print *, 'calling nnls'
        call nnls(A,m,m,n,B,xvec,rnorm,wvec,zvec,
     + invec, mode)
       
        print *, 'end - nnls'
        print *, ' '

c     Print output
        print *, 'print output...'
        print *, 'mode=', mode
        print *, 'rnorm=', rnorm
        print *, ' '
      
c     store the model parameters in an array
        do 410 q=1, n
          sr(q,p)=xvec(q)
          tmpsum(q)=tmpsum(q)+sr(q,p)
410     enddo
      
400   enddo
c     end of random realizations
 
c     now compute mean and standard deviations of sr

      do 420 q=1, n 
        fsr(q)=tmpsum(q)/numsimu
420   enddo

      do 430 q=1, n
        tmps=0.0
        do 440 p=1, numsimu
          tmps=tmps+(sr(q,p)-fsr(q))**2
440     enddo
        fssr(q)=sqrt(tmps/(numsimu-1))
430   enddo
    
c     the shift in east, north of GPS and LOS
      print *,'GPS east velocity shift',fsr(numft+1)-shiftconst,
     + fssr(numft+1)
      print *,'GPS north velocity shift',fsr(numft+2)-shiftconst,
     + fssr(numft+2)
      print *,'InSAR LOS shift',fsr(numft+3)-shiftconst,fssr(numft+3)
 
c     compute the predicted GPS data 
      do 500 j=1, numgps
        do 510 i=1, numft
          pug(j)=ugg(j,i)*fsr(i)+pug(j)
          pvg(j)=vgg(j,i)*fsr(i)+pvg(j)
510     enddo
        pug(j)=pug(j)+fsr(numft+1)-shiftconst
        pvg(j)=pvg(j)+fsr(numft+2)-shiftconst
500   enddo

c     compute the predicted InSAR data
      do 520 j=1, numsar
        do 530 i=1, numft
          plos(j)=losgs(j,i)*fsr(i)+plos(j)
530     enddo
        plos(j)=plos(j)+fsr(numft+3)-shiftconst
520   enddo

c     compute the kai square misfit for the GPS
      do 540 j=1,numgps
        sumgps=sumgps+((pug(j)-ug(j))/sug(j))**2
     + + ((pvg(j)-vg(j))/svg(j))**2     
	sumsgps=sumsgps+1/sug(j)**2+1/svg(j)**2
540   enddo
      chigps=sumgps/(numgps*2-numft)
      wrmsgps=sqrt(sumgps/sumsgps)

c     compute the kai square misfit for the InSAR
      do 550 j=1,numsar
        sumsar=sumsar+((plos(j)-los(j))/slos(j))**2
	sumssar=sumssar+(1/slos(j))**2
550   enddo
      chisar=sumsar/(numsar-numft)
      wrmssar=sqrt(sumsar/sumssar)
     
      chiboth=(sumsar+sumgps)/(numsar+numgps*2-numft)     

      print *,'Chi Square misfit for GPS=', chigps 
      print *,'Weighted RMS misfit for GPS=', wrmsgps
      print *,'Chi Square misfit for InSAR=', chisar
      print *,'Weighted RMS misfit for InSAR=', wrmssar
      print *,'Chi Square misfit for both=', chiboth 

c     write the GPS velocity into a file
      open(unit=95, file='pred7.gps.dat')
      do 560 j=1, numgps
        write(95,19) ug(j),pug(j),ug(j)-pug(j),sug(j),
     +  vg(j),pvg(j),vg(j)-pvg(j),svg(j)
560   enddo
      close(95)
19    format(8(F7.2))

c     write the InSAR velocity into a file
      open(unit=105, file='pred7.sar.dat')
      do 570 j=1, numsar
        write(105,29) los(j),plos(j),los(j)-plos(j),slos(j)
570   enddo
      close(105)
29    format(4(F7.2))

c     write the slip rate into a file
      open(unit=85, file='sr7.dat')
      do 140 i=1, numft
        write(85,*) i, fs(i), sfs(i), fsr(i), fssr(i)
140   enddo
      close(85)
      
88    stop
      end
